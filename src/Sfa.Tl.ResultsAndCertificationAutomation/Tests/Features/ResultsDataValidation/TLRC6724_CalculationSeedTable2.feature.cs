// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Sfa.Tl.ResultsAndCertificationAutomation.Tests.Features.ResultsDataValidation
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TLRC6724 Calculation Seed Table 2")]
    public partial class TLRC6724CalculationSeedTable2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "TLRC6724_CalculationSeedTable2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests/Features/ResultsDataValidation", "TLRC6724 Calculation Seed Table 2", "As per the user story, validate the T Levels along with a given core and speciali" +
                    "sm grade have the expected overall \r\nresult for that combination recorded in the" +
                    " record in the [OverallGradeLookup] table", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TLRC_6724 Data Validation for Education and childcare")]
        [NUnit.Framework.CategoryAttribute("RegressionTest")]
        [NUnit.Framework.CategoryAttribute("DataValidation")]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "A*", "Distinction", "Distinction*", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "A*", "Merit", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "A*", "Pass", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "A", "Distinction", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "A", "Merit", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "A", "Pass", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "B", "Distinction", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "B", "Merit", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "B", "Pass", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "C", "Distinction", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "C", "Merit", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "C", "Pass", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "D", "Distinction", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "D", "Merit", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "D", "Pass", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "E", "Distinction", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "E", "Merit", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Education and childcare", "E", "Pass", "Pass", null)]
        public void TLRC_6724DataValidationForEducationAndChildcare(string tLevel, string coreGrade, string specialismGrade, string expectedGrade, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RegressionTest",
                    "DataValidation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TLevel", tLevel);
            argumentsOfScenario.Add("Core Grade", coreGrade);
            argumentsOfScenario.Add("Specialism Grade", specialismGrade);
            argumentsOfScenario.Add("Expected Grade", expectedGrade);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TLRC_6724 Data Validation for Education and childcare", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
testRunner.Given(string.Format("I have run the query to return all results from Overall Grade Lookup table using " +
                            "\"{0}\" \"{1}\" \"{2}\"", tLevel, coreGrade, specialismGrade), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
testRunner.Then(string.Format("I should see the Overall Result match the \"{0}\"", expectedGrade), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TLRC_6724 Data Validation for Science")]
        [NUnit.Framework.CategoryAttribute("RegressionTest")]
        [NUnit.Framework.CategoryAttribute("DataValidation")]
        [NUnit.Framework.TestCaseAttribute("Science", "A*", "Distinction", "Distinction*", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "A*", "Merit", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "A*", "Pass", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "A", "Distinction", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "A", "Merit", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "A", "Pass", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "B", "Distinction", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "B", "Merit", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "B", "Pass", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "C", "Distinction", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "C", "Merit", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "C", "Pass", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "D", "Distinction", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "D", "Merit", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "D", "Pass", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "E", "Distinction", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "E", "Merit", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Science", "E", "Pass", "Pass", null)]
        public void TLRC_6724DataValidationForScience(string tLevel, string coreGrade, string specialismGrade, string expectedGrade, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RegressionTest",
                    "DataValidation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TLevel", tLevel);
            argumentsOfScenario.Add("Core Grade", coreGrade);
            argumentsOfScenario.Add("Specialism Grade", specialismGrade);
            argumentsOfScenario.Add("Expected Grade", expectedGrade);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TLRC_6724 Data Validation for Science", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
testRunner.Given(string.Format("I have run the query to return all results from Overall Grade Lookup table using " +
                            "\"{0}\" \"{1}\" \"{2}\"", tLevel, coreGrade, specialismGrade), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
testRunner.Then(string.Format("I should see the Overall Result match the \"{0}\"", expectedGrade), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TLRC_6724 Data Validation for Onsite Construction")]
        [NUnit.Framework.CategoryAttribute("RegressionTest")]
        [NUnit.Framework.CategoryAttribute("DataValidation")]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "A*", "Distinction", "Distinction*", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "A*", "Merit", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "A*", "Pass", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "A", "Distinction", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "A", "Merit", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "A", "Pass", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "B", "Distinction", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "B", "Merit", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "B", "Pass", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "C", "Distinction", "Distinction", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "C", "Merit", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "C", "Pass", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "D", "Distinction", "Merit", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "D", "Merit", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "D", "Pass", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "E", "Distinction", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "E", "Merit", "Pass", null)]
        [NUnit.Framework.TestCaseAttribute("Onsite Construction", "E", "Pass", "Pass", null)]
        public void TLRC_6724DataValidationForOnsiteConstruction(string tLevel, string coreGrade, string specialismGrade, string expectedGrade, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RegressionTest",
                    "DataValidation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TLevel", tLevel);
            argumentsOfScenario.Add("Core Grade", coreGrade);
            argumentsOfScenario.Add("Specialism Grade", specialismGrade);
            argumentsOfScenario.Add("Expected Grade", expectedGrade);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TLRC_6724 Data Validation for Onsite Construction", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
testRunner.Given(string.Format("I have run the query to return all results from Overall Grade Lookup table using " +
                            "\"{0}\" \"{1}\" \"{2}\"", tLevel, coreGrade, specialismGrade), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
testRunner.Then(string.Format("I should see the Overall Result match the \"{0}\"", expectedGrade), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
